// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: coin_nft.proto

package coins_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoinNFTService_Create_FullMethodName  = "/coins_service.CoinNFTService/Create"
	CoinNFTService_GetById_FullMethodName = "/coins_service.CoinNFTService/GetById"
	CoinNFTService_Update_FullMethodName  = "/coins_service.CoinNFTService/Update"
	CoinNFTService_GetList_FullMethodName = "/coins_service.CoinNFTService/GetList"
	CoinNFTService_Delete_FullMethodName  = "/coins_service.CoinNFTService/Delete"
)

// CoinNFTServiceClient is the client API for CoinNFTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoinNFTServiceClient interface {
	Create(ctx context.Context, in *CoinNFTCreate, opts ...grpc.CallOption) (*CoinNFT, error)
	GetById(ctx context.Context, in *CoinNFTPrimaryKey, opts ...grpc.CallOption) (*CoinNFT, error)
	Update(ctx context.Context, in *CoinNFTUpdate, opts ...grpc.CallOption) (*CoinNFT, error)
	GetList(ctx context.Context, in *GetListCoinNFTRequest, opts ...grpc.CallOption) (*GetListCoinNFTResponse, error)
	Delete(ctx context.Context, in *CoinNFTPrimaryKey, opts ...grpc.CallOption) (*Empty, error)
}

type coinNFTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoinNFTServiceClient(cc grpc.ClientConnInterface) CoinNFTServiceClient {
	return &coinNFTServiceClient{cc}
}

func (c *coinNFTServiceClient) Create(ctx context.Context, in *CoinNFTCreate, opts ...grpc.CallOption) (*CoinNFT, error) {
	out := new(CoinNFT)
	err := c.cc.Invoke(ctx, CoinNFTService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinNFTServiceClient) GetById(ctx context.Context, in *CoinNFTPrimaryKey, opts ...grpc.CallOption) (*CoinNFT, error) {
	out := new(CoinNFT)
	err := c.cc.Invoke(ctx, CoinNFTService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinNFTServiceClient) Update(ctx context.Context, in *CoinNFTUpdate, opts ...grpc.CallOption) (*CoinNFT, error) {
	out := new(CoinNFT)
	err := c.cc.Invoke(ctx, CoinNFTService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinNFTServiceClient) GetList(ctx context.Context, in *GetListCoinNFTRequest, opts ...grpc.CallOption) (*GetListCoinNFTResponse, error) {
	out := new(GetListCoinNFTResponse)
	err := c.cc.Invoke(ctx, CoinNFTService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinNFTServiceClient) Delete(ctx context.Context, in *CoinNFTPrimaryKey, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, CoinNFTService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinNFTServiceServer is the server API for CoinNFTService service.
// All implementations must embed UnimplementedCoinNFTServiceServer
// for forward compatibility
type CoinNFTServiceServer interface {
	Create(context.Context, *CoinNFTCreate) (*CoinNFT, error)
	GetById(context.Context, *CoinNFTPrimaryKey) (*CoinNFT, error)
	Update(context.Context, *CoinNFTUpdate) (*CoinNFT, error)
	GetList(context.Context, *GetListCoinNFTRequest) (*GetListCoinNFTResponse, error)
	Delete(context.Context, *CoinNFTPrimaryKey) (*Empty, error)
	mustEmbedUnimplementedCoinNFTServiceServer()
}

// UnimplementedCoinNFTServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoinNFTServiceServer struct {
}

func (UnimplementedCoinNFTServiceServer) Create(context.Context, *CoinNFTCreate) (*CoinNFT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCoinNFTServiceServer) GetById(context.Context, *CoinNFTPrimaryKey) (*CoinNFT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedCoinNFTServiceServer) Update(context.Context, *CoinNFTUpdate) (*CoinNFT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCoinNFTServiceServer) GetList(context.Context, *GetListCoinNFTRequest) (*GetListCoinNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedCoinNFTServiceServer) Delete(context.Context, *CoinNFTPrimaryKey) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCoinNFTServiceServer) mustEmbedUnimplementedCoinNFTServiceServer() {}

// UnsafeCoinNFTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoinNFTServiceServer will
// result in compilation errors.
type UnsafeCoinNFTServiceServer interface {
	mustEmbedUnimplementedCoinNFTServiceServer()
}

func RegisterCoinNFTServiceServer(s grpc.ServiceRegistrar, srv CoinNFTServiceServer) {
	s.RegisterService(&CoinNFTService_ServiceDesc, srv)
}

func _CoinNFTService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinNFTCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinNFTServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinNFTService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinNFTServiceServer).Create(ctx, req.(*CoinNFTCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinNFTService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinNFTPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinNFTServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinNFTService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinNFTServiceServer).GetById(ctx, req.(*CoinNFTPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinNFTService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinNFTUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinNFTServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinNFTService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinNFTServiceServer).Update(ctx, req.(*CoinNFTUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinNFTService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListCoinNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinNFTServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinNFTService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinNFTServiceServer).GetList(ctx, req.(*GetListCoinNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinNFTService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoinNFTPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinNFTServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoinNFTService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinNFTServiceServer).Delete(ctx, req.(*CoinNFTPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// CoinNFTService_ServiceDesc is the grpc.ServiceDesc for CoinNFTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoinNFTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coins_service.CoinNFTService",
	HandlerType: (*CoinNFTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CoinNFTService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _CoinNFTService_GetById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CoinNFTService_Update_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _CoinNFTService_GetList_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CoinNFTService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coin_nft.proto",
}
