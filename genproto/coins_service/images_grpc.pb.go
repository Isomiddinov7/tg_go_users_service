// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: images.proto

package coins_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImagesService_ImageUpload_FullMethodName = "/coins_service.ImagesService/ImageUpload"
	ImagesService_ImageDelete_FullMethodName = "/coins_service.ImagesService/ImageDelete"
	ImagesService_GetFile_FullMethodName     = "/coins_service.ImagesService/GetFile"
)

// ImagesServiceClient is the client API for ImagesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImagesServiceClient interface {
	ImageUpload(ctx context.Context, in *ImageData, opts ...grpc.CallOption) (*ImagePrimaryKey, error)
	ImageDelete(ctx context.Context, in *ImagePrimaryKey, opts ...grpc.CallOption) (*Empty, error)
	GetFile(ctx context.Context, in *ImagePrimaryKey, opts ...grpc.CallOption) (*ImageUrl, error)
}

type imagesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImagesServiceClient(cc grpc.ClientConnInterface) ImagesServiceClient {
	return &imagesServiceClient{cc}
}

func (c *imagesServiceClient) ImageUpload(ctx context.Context, in *ImageData, opts ...grpc.CallOption) (*ImagePrimaryKey, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImagePrimaryKey)
	err := c.cc.Invoke(ctx, ImagesService_ImageUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesServiceClient) ImageDelete(ctx context.Context, in *ImagePrimaryKey, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ImagesService_ImageDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imagesServiceClient) GetFile(ctx context.Context, in *ImagePrimaryKey, opts ...grpc.CallOption) (*ImageUrl, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImageUrl)
	err := c.cc.Invoke(ctx, ImagesService_GetFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImagesServiceServer is the server API for ImagesService service.
// All implementations must embed UnimplementedImagesServiceServer
// for forward compatibility.
type ImagesServiceServer interface {
	ImageUpload(context.Context, *ImageData) (*ImagePrimaryKey, error)
	ImageDelete(context.Context, *ImagePrimaryKey) (*Empty, error)
	GetFile(context.Context, *ImagePrimaryKey) (*ImageUrl, error)
	mustEmbedUnimplementedImagesServiceServer()
}

// UnimplementedImagesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImagesServiceServer struct{}

func (UnimplementedImagesServiceServer) ImageUpload(context.Context, *ImageData) (*ImagePrimaryKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageUpload not implemented")
}
func (UnimplementedImagesServiceServer) ImageDelete(context.Context, *ImagePrimaryKey) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImageDelete not implemented")
}
func (UnimplementedImagesServiceServer) GetFile(context.Context, *ImagePrimaryKey) (*ImageUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedImagesServiceServer) mustEmbedUnimplementedImagesServiceServer() {}
func (UnimplementedImagesServiceServer) testEmbeddedByValue()                       {}

// UnsafeImagesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImagesServiceServer will
// result in compilation errors.
type UnsafeImagesServiceServer interface {
	mustEmbedUnimplementedImagesServiceServer()
}

func RegisterImagesServiceServer(s grpc.ServiceRegistrar, srv ImagesServiceServer) {
	// If the following call pancis, it indicates UnimplementedImagesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImagesService_ServiceDesc, srv)
}

func _ImagesService_ImageUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServiceServer).ImageUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImagesService_ImageUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServiceServer).ImageUpload(ctx, req.(*ImageData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImagesService_ImageDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImagePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServiceServer).ImageDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImagesService_ImageDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServiceServer).ImageDelete(ctx, req.(*ImagePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImagesService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImagePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImagesServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImagesService_GetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImagesServiceServer).GetFile(ctx, req.(*ImagePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// ImagesService_ServiceDesc is the grpc.ServiceDesc for ImagesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImagesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coins_service.ImagesService",
	HandlerType: (*ImagesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImageUpload",
			Handler:    _ImagesService_ImageUpload_Handler,
		},
		{
			MethodName: "ImageDelete",
			Handler:    _ImagesService_ImageDelete_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _ImagesService_GetFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "images.proto",
}
