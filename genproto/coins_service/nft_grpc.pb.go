// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: nft.proto

package coins_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NFTService_Create_FullMethodName  = "/coins_service.NFTService/Create"
	NFTService_GetById_FullMethodName = "/coins_service.NFTService/GetById"
	NFTService_Update_FullMethodName  = "/coins_service.NFTService/Update"
	NFTService_GetAll_FullMethodName  = "/coins_service.NFTService/GetAll"
)

// NFTServiceClient is the client API for NFTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NFTServiceClient interface {
	Create(ctx context.Context, in *CreateNFT, opts ...grpc.CallOption) (*NFT, error)
	GetById(ctx context.Context, in *NFTPrimaryKey, opts ...grpc.CallOption) (*NFT, error)
	Update(ctx context.Context, in *UpdateNFT, opts ...grpc.CallOption) (*NFT, error)
	GetAll(ctx context.Context, in *GetListNFTRequest, opts ...grpc.CallOption) (*GetListNFTResponse, error)
}

type nFTServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNFTServiceClient(cc grpc.ClientConnInterface) NFTServiceClient {
	return &nFTServiceClient{cc}
}

func (c *nFTServiceClient) Create(ctx context.Context, in *CreateNFT, opts ...grpc.CallOption) (*NFT, error) {
	out := new(NFT)
	err := c.cc.Invoke(ctx, NFTService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) GetById(ctx context.Context, in *NFTPrimaryKey, opts ...grpc.CallOption) (*NFT, error) {
	out := new(NFT)
	err := c.cc.Invoke(ctx, NFTService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) Update(ctx context.Context, in *UpdateNFT, opts ...grpc.CallOption) (*NFT, error) {
	out := new(NFT)
	err := c.cc.Invoke(ctx, NFTService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nFTServiceClient) GetAll(ctx context.Context, in *GetListNFTRequest, opts ...grpc.CallOption) (*GetListNFTResponse, error) {
	out := new(GetListNFTResponse)
	err := c.cc.Invoke(ctx, NFTService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NFTServiceServer is the server API for NFTService service.
// All implementations must embed UnimplementedNFTServiceServer
// for forward compatibility
type NFTServiceServer interface {
	Create(context.Context, *CreateNFT) (*NFT, error)
	GetById(context.Context, *NFTPrimaryKey) (*NFT, error)
	Update(context.Context, *UpdateNFT) (*NFT, error)
	GetAll(context.Context, *GetListNFTRequest) (*GetListNFTResponse, error)
	mustEmbedUnimplementedNFTServiceServer()
}

// UnimplementedNFTServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNFTServiceServer struct {
}

func (UnimplementedNFTServiceServer) Create(context.Context, *CreateNFT) (*NFT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNFTServiceServer) GetById(context.Context, *NFTPrimaryKey) (*NFT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedNFTServiceServer) Update(context.Context, *UpdateNFT) (*NFT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedNFTServiceServer) GetAll(context.Context, *GetListNFTRequest) (*GetListNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedNFTServiceServer) mustEmbedUnimplementedNFTServiceServer() {}

// UnsafeNFTServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NFTServiceServer will
// result in compilation errors.
type UnsafeNFTServiceServer interface {
	mustEmbedUnimplementedNFTServiceServer()
}

func RegisterNFTServiceServer(s grpc.ServiceRegistrar, srv NFTServiceServer) {
	s.RegisterService(&NFTService_ServiceDesc, srv)
}

func _NFTService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNFT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NFTService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).Create(ctx, req.(*CreateNFT))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NFTPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NFTService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).GetById(ctx, req.(*NFTPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNFT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NFTService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).Update(ctx, req.(*UpdateNFT))
	}
	return interceptor(ctx, in, info, handler)
}

func _NFTService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListNFTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NFTServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NFTService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NFTServiceServer).GetAll(ctx, req.(*GetListNFTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NFTService_ServiceDesc is the grpc.ServiceDesc for NFTService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NFTService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coins_service.NFTService",
	HandlerType: (*NFTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NFTService_Create_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _NFTService_GetById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NFTService_Update_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _NFTService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nft.proto",
}
