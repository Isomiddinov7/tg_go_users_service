// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: telegram_premium.proto

package coins_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TelegramPremiumService_CreatePrice_FullMethodName             = "/coins_service.TelegramPremiumService/CreatePrice"
	TelegramPremiumService_CreatePremium_FullMethodName           = "/coins_service.TelegramPremiumService/CreatePremium"
	TelegramPremiumService_GetPremiumById_FullMethodName          = "/coins_service.TelegramPremiumService/GetPremiumById"
	TelegramPremiumService_GetPremiumList_FullMethodName          = "/coins_service.TelegramPremiumService/GetPremiumList"
	TelegramPremiumService_UpdateTransactionStatus_FullMethodName = "/coins_service.TelegramPremiumService/UpdateTransactionStatus"
	TelegramPremiumService_PremiumTransaction_FullMethodName      = "/coins_service.TelegramPremiumService/PremiumTransaction"
	TelegramPremiumService_GetList_FullMethodName                 = "/coins_service.TelegramPremiumService/GetList"
)

// TelegramPremiumServiceClient is the client API for TelegramPremiumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelegramPremiumServiceClient interface {
	CreatePrice(ctx context.Context, in *CreateTelegramPremiumPrice, opts ...grpc.CallOption) (*TelegramPremiumPrice, error)
	CreatePremium(ctx context.Context, in *CreateTelegramPremium, opts ...grpc.CallOption) (*TelegramPremium, error)
	GetPremiumById(ctx context.Context, in *TelegramPriemiumPrimaryKey, opts ...grpc.CallOption) (*TelegramPremium, error)
	GetPremiumList(ctx context.Context, in *GetPremiumListRequest, opts ...grpc.CallOption) (*GetPremiumListResponse, error)
	UpdateTransactionStatus(ctx context.Context, in *UpdateStatus, opts ...grpc.CallOption) (*Empty, error)
	PremiumTransaction(ctx context.Context, in *PremiumTransactionRequest, opts ...grpc.CallOption) (*Empty, error)
	GetList(ctx context.Context, in *GetListPremiumRequest, opts ...grpc.CallOption) (*GetPremiumTransactionResponse, error)
}

type telegramPremiumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelegramPremiumServiceClient(cc grpc.ClientConnInterface) TelegramPremiumServiceClient {
	return &telegramPremiumServiceClient{cc}
}

func (c *telegramPremiumServiceClient) CreatePrice(ctx context.Context, in *CreateTelegramPremiumPrice, opts ...grpc.CallOption) (*TelegramPremiumPrice, error) {
	out := new(TelegramPremiumPrice)
	err := c.cc.Invoke(ctx, TelegramPremiumService_CreatePrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramPremiumServiceClient) CreatePremium(ctx context.Context, in *CreateTelegramPremium, opts ...grpc.CallOption) (*TelegramPremium, error) {
	out := new(TelegramPremium)
	err := c.cc.Invoke(ctx, TelegramPremiumService_CreatePremium_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramPremiumServiceClient) GetPremiumById(ctx context.Context, in *TelegramPriemiumPrimaryKey, opts ...grpc.CallOption) (*TelegramPremium, error) {
	out := new(TelegramPremium)
	err := c.cc.Invoke(ctx, TelegramPremiumService_GetPremiumById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramPremiumServiceClient) GetPremiumList(ctx context.Context, in *GetPremiumListRequest, opts ...grpc.CallOption) (*GetPremiumListResponse, error) {
	out := new(GetPremiumListResponse)
	err := c.cc.Invoke(ctx, TelegramPremiumService_GetPremiumList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramPremiumServiceClient) UpdateTransactionStatus(ctx context.Context, in *UpdateStatus, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TelegramPremiumService_UpdateTransactionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramPremiumServiceClient) PremiumTransaction(ctx context.Context, in *PremiumTransactionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, TelegramPremiumService_PremiumTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramPremiumServiceClient) GetList(ctx context.Context, in *GetListPremiumRequest, opts ...grpc.CallOption) (*GetPremiumTransactionResponse, error) {
	out := new(GetPremiumTransactionResponse)
	err := c.cc.Invoke(ctx, TelegramPremiumService_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelegramPremiumServiceServer is the server API for TelegramPremiumService service.
// All implementations must embed UnimplementedTelegramPremiumServiceServer
// for forward compatibility
type TelegramPremiumServiceServer interface {
	CreatePrice(context.Context, *CreateTelegramPremiumPrice) (*TelegramPremiumPrice, error)
	CreatePremium(context.Context, *CreateTelegramPremium) (*TelegramPremium, error)
	GetPremiumById(context.Context, *TelegramPriemiumPrimaryKey) (*TelegramPremium, error)
	GetPremiumList(context.Context, *GetPremiumListRequest) (*GetPremiumListResponse, error)
	UpdateTransactionStatus(context.Context, *UpdateStatus) (*Empty, error)
	PremiumTransaction(context.Context, *PremiumTransactionRequest) (*Empty, error)
	GetList(context.Context, *GetListPremiumRequest) (*GetPremiumTransactionResponse, error)
	mustEmbedUnimplementedTelegramPremiumServiceServer()
}

// UnimplementedTelegramPremiumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTelegramPremiumServiceServer struct {
}

func (UnimplementedTelegramPremiumServiceServer) CreatePrice(context.Context, *CreateTelegramPremiumPrice) (*TelegramPremiumPrice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrice not implemented")
}
func (UnimplementedTelegramPremiumServiceServer) CreatePremium(context.Context, *CreateTelegramPremium) (*TelegramPremium, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePremium not implemented")
}
func (UnimplementedTelegramPremiumServiceServer) GetPremiumById(context.Context, *TelegramPriemiumPrimaryKey) (*TelegramPremium, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPremiumById not implemented")
}
func (UnimplementedTelegramPremiumServiceServer) GetPremiumList(context.Context, *GetPremiumListRequest) (*GetPremiumListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPremiumList not implemented")
}
func (UnimplementedTelegramPremiumServiceServer) UpdateTransactionStatus(context.Context, *UpdateStatus) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransactionStatus not implemented")
}
func (UnimplementedTelegramPremiumServiceServer) PremiumTransaction(context.Context, *PremiumTransactionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PremiumTransaction not implemented")
}
func (UnimplementedTelegramPremiumServiceServer) GetList(context.Context, *GetListPremiumRequest) (*GetPremiumTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedTelegramPremiumServiceServer) mustEmbedUnimplementedTelegramPremiumServiceServer() {
}

// UnsafeTelegramPremiumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelegramPremiumServiceServer will
// result in compilation errors.
type UnsafeTelegramPremiumServiceServer interface {
	mustEmbedUnimplementedTelegramPremiumServiceServer()
}

func RegisterTelegramPremiumServiceServer(s grpc.ServiceRegistrar, srv TelegramPremiumServiceServer) {
	s.RegisterService(&TelegramPremiumService_ServiceDesc, srv)
}

func _TelegramPremiumService_CreatePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTelegramPremiumPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramPremiumServiceServer).CreatePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramPremiumService_CreatePrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramPremiumServiceServer).CreatePrice(ctx, req.(*CreateTelegramPremiumPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramPremiumService_CreatePremium_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTelegramPremium)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramPremiumServiceServer).CreatePremium(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramPremiumService_CreatePremium_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramPremiumServiceServer).CreatePremium(ctx, req.(*CreateTelegramPremium))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramPremiumService_GetPremiumById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TelegramPriemiumPrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramPremiumServiceServer).GetPremiumById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramPremiumService_GetPremiumById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramPremiumServiceServer).GetPremiumById(ctx, req.(*TelegramPriemiumPrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramPremiumService_GetPremiumList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPremiumListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramPremiumServiceServer).GetPremiumList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramPremiumService_GetPremiumList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramPremiumServiceServer).GetPremiumList(ctx, req.(*GetPremiumListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramPremiumService_UpdateTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramPremiumServiceServer).UpdateTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramPremiumService_UpdateTransactionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramPremiumServiceServer).UpdateTransactionStatus(ctx, req.(*UpdateStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramPremiumService_PremiumTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PremiumTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramPremiumServiceServer).PremiumTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramPremiumService_PremiumTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramPremiumServiceServer).PremiumTransaction(ctx, req.(*PremiumTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelegramPremiumService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListPremiumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramPremiumServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelegramPremiumService_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramPremiumServiceServer).GetList(ctx, req.(*GetListPremiumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelegramPremiumService_ServiceDesc is the grpc.ServiceDesc for TelegramPremiumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelegramPremiumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coins_service.TelegramPremiumService",
	HandlerType: (*TelegramPremiumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePrice",
			Handler:    _TelegramPremiumService_CreatePrice_Handler,
		},
		{
			MethodName: "CreatePremium",
			Handler:    _TelegramPremiumService_CreatePremium_Handler,
		},
		{
			MethodName: "GetPremiumById",
			Handler:    _TelegramPremiumService_GetPremiumById_Handler,
		},
		{
			MethodName: "GetPremiumList",
			Handler:    _TelegramPremiumService_GetPremiumList_Handler,
		},
		{
			MethodName: "UpdateTransactionStatus",
			Handler:    _TelegramPremiumService_UpdateTransactionStatus_Handler,
		},
		{
			MethodName: "PremiumTransaction",
			Handler:    _TelegramPremiumService_PremiumTransaction_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _TelegramPremiumService_GetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "telegram_premium.proto",
}
